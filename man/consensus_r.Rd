% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/consseg_r.R
\name{consensus_r}
\alias{consensus_r}
\title{Calculate consensus segments from a list of segmentation breakpoints}
\usage{
consensus_r(b, n, w, e = function(L, n) L^2/2, store = FALSE,
  test = FALSE, rel.tol = 1e-08)
}
\arguments{
\item{b}{list of breakpoints of different segmentations.}

\item{n}{total sequence length (\code{max(b)} if not provided).}

\item{w}{weights vector, must sum up to 1 or will be normalized.}

\item{e}{potential function, taking two arguments: the length \code{L}
of the evaluated interval and the total sequence length \code{n}.}

\item{store}{for debugging: store and return all internal vectors.}

\item{test}{for debugging: calculate Delta directly without using
delta helpers. This is very slow but straightforward to implement,
the resulting Delta is tested against the Delta of the fast
implementation, and results can be used to test other implementations
(eg. in Rcpp).}

\item{rel.tol}{relative error tolerance to report and count differences
in Delta during test mode (\code{test==TRUE}).}
}
\description{
This R implementation is maintained for debugging and testing
Rcpp code against expected results. If \code{test==TRUE} the
Delta of the recursion is additionally calculated directly
(very inefficiently) to compare results with an explicitly correct
calculation. This can also be useful when testing
potential functions that can yield large numbers and thereby cause
rounding errors.
}
